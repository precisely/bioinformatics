from mamba import description, context, it
import convert_ancestry as conv
import datetime
import types
import expects
import os.path
import random

_bad_date_input = '#This file was generated by AncestryDNA at: 20/03/12 \n#It should cause an error\n'
_good_date_input = '#This file was generated by AncestryDNA at: 12/17/2017 15:29:39 UTC\n'
_bad_genome_input = '#of the SNP using human reference build bad input no numbers\n'
_good_genome_input = '#of the SNP using human reference build 37.1 coordinates.  Columns four and five\n'
_expected = '# This data file generated by 23andMe on: Fri Apr 20 16:20:22 2018\n# More information on reference human assembly build 99\n#\trsid\tchromosome\tposition\tgenotype\n'

with description('Testing Ancestry.com -> 23andme converter:') as testConverter:
    with it('Bad filepath for input_generator'):
        gen = conv.input_file_generator('obviously/a/bad/path.txt')
        expects.expect(lambda: next(gen)).to(expects.raise_error(FileNotFoundError))
    
    with it('Creating input/output Generator and checking output file exists'):
        outfile_name = 'mamba_out/test_outputs/out_23andMe.txt'
        in_generator = conv.input_file_generator('mamba_out/AncestryDNA.txt')
        out_generator = conv.output_file_generator(outfile_name)
        #prime the generator
        out_generator.send(None)
        out_generator.send('TEST\n')
        with context('Input generator built'):
            assert type(in_generator) == types.GeneratorType
        with context('Output generator built'):
            assert type(out_generator) == types.GeneratorType
            assert os.path.isfile(outfile_name)
        with context('Outfile generator testing: output_file_generator().send()'):
            out_generator.send('This is a test\n')
            out_generator.send('12345\n')
            out_generator.send('Final line of test')
            try:
                out_generator.send('close')
            except(StopIteration):
                pass    
            expected = ['TEST\n', 'This is a test\n', '12345\n', 'Final line of test']
            with open(outfile_name, 'r') as out:
                for i in range(4):
                    testfile_line = out.readline()
                    assert expected[i] == testfile_line

    with it('Parsing correctly formatted AncestryDNA input header for metadata'):
        with context('parse_ancestry_time_header'):
            assert conv.parse_ancestry_time_header(_good_date_input) == (datetime.datetime(2017, 12, 17, 15, 29, 39))
            expects.expect(lambda: conv.parse_ancestry_time_header(_bad_date_input)).to(expects.raise_error(ValueError))
        
        with context('parse_ancestry_genome_version'):
            assert conv.parse_ancestry_genome_version(_good_genome_input) == '37.1'
            expects.expect(lambda: conv.parse_ancestry_genome_version(_bad_genome_input)).to(expects.raise_error(ValueError, 'Bad input for HRG version')) 

        generator = iter([_good_date_input, _good_genome_input, '\n'])
        genome_version, datetime_obj = conv.parse_metadata(generator)
        with context('Genome Version should be 37.1: parse_metadata()'):    
            assert genome_version == '37.1'
        with context('Datetime object should be the correct type: parse_metadata()'):
            assert type(datetime_obj) == datetime.datetime
            assert datetime_obj.year == 2017
            assert datetime_obj.month == 12
            assert datetime_obj.day == 17
            assert datetime_obj.hour == 15
            assert datetime_obj.minute == 29
            assert datetime_obj.second == 39
   
    with it('Parsing incorrectly formatted timedate in AncestryDNA input header'):
        generator = iter([_bad_date_input, _good_genome_input,'\n'])  
        expects.expect(lambda: conv.parse_metadata(generator)).to(expects.raise_error(ValueError))
        
    with it('Parsing incorrectly formatted human refrence genome in AncestryDNA input header'):
        generator = iter([_good_date_input, _bad_genome_input, '\n'])  
        expects.expect(lambda: conv.parse_metadata(generator)).to(expects.raise_error(ValueError, 'Bad input for HRG version'))

    with it('format_metadata() with proper input'):
        date_obj = datetime.datetime(2018, 4, 20, 16, 20, 22)
        result = conv.format_metadata(date_obj, 99)
        with context('Good input metadata formatting'):
            assert _expected == result

    with it('Chromosome conversions test'):
        test = ['-1', '20', '21', '22', '23', '24', '25', '26', '27']
        result = []
        expected_chromosomes = [0, '20', '21', '22', 'X', 'Y', 'Y', 'MT', 0]
        for i in test:
            try:
                result.append(conv.convert_chromosome(i, 'rs140000'))
            except(ValueError):
                result.append(0)    

        for r in range(9):
            assert result[r] == expected_chromosomes[r]

    with it('Test formatting of actual data'):
        good_input = 'rs4475691\t5\t846808\tT\tC'
        expected_output_good_input = 'rs4475691\t5\t846808\tTC\n'
        skip_input = '#rsid4475691\t5\t846808\tT\tC'
        bad_input = 'This\tis\tnot\ta\tproper line'
        result = conv.format_data(good_input)
      
        assert result == expected_output_good_input
        assert conv.format_data(skip_input) == skip_input
        assert conv.format_data(bad_input) == None
