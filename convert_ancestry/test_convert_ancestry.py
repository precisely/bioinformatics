from mamba import description, context, it
import convert_ancestry.convert_ancestry as conv
import datetime
import types
import expects
import random
import StringIO

_bad_date_input = '#This file was generated by AncestryDNA at: 20/03/12 \n#It should cause an error\n'
_good_date_input = '#This file was generated by AncestryDNA at: 12/17/2017 15:29:39 UTC\n'
_bad_genome_input = '#of the SNP using human reference build bad input no numbers\n'
_good_genome_input = '#of the SNP using human reference build 37.1 coordinates.  Columns four and five\n'
_bad_data_entry = 'rs12345\t1\t2\n'
_good_data_entry = 'rs12345\t1\t12345\tT\tA\n'
_proper_conv_good_data = 'rs12345\t1\t12345\tTA\n'
_expected = '# This data file generated by 23andMe at: Fri Apr 20 16:20:22 2018\n# More information on reference human assembly build 99\n#\trsid\tchromosome\tposition\tgenotype\n'

with description('Testing Ancestry.com -> 23andme converter:') as testConverter:
       
    with context('Parse metadata from the input stream'):
        with it('finds the date of creation and makes a datetime object'):
            assert conv.parse_ancestry_time_header(_good_date_input) == (datetime.datetime(2017, 12, 17, 15, 29, 39))
            expects.expect(lambda: conv.parse_ancestry_time_header(_bad_date_input)).to(expects.raise_error(ValueError))
        
        with it('finds the refrence genome number'):
            assert conv.parse_ancestry_genome_version(_good_genome_input) == '37.1'
            expects.expect(lambda: conv.parse_ancestry_genome_version(_bad_genome_input)).to(expects.raise_error(ValueError, 'Bad input for HRG version')) 

        
        with it('should give us genome version 37.1'): 
            metadata_stream = StringIO.StringIO(_good_date_input + _good_genome_input + '\n')
            genome_version, datetime_obj = conv.parse_metadata(metadata_stream)   
            assert genome_version == '37.1'
        with it('should be a datetime object with the correct date'):
            metadata_stream = StringIO.StringIO(_good_date_input + _good_genome_input + '\n')
            genome_version, datetime_obj = conv.parse_metadata(metadata_stream)
            assert type(datetime_obj) == datetime.datetime
            assert datetime_obj.year == 2017
            assert datetime_obj.month == 12
            assert datetime_obj.day == 17
            assert datetime_obj.hour == 15
            assert datetime_obj.minute == 29
            assert datetime_obj.second == 39
   
    with it('raises a ValueError when the metadata for date is not formatted correctly'):
        metadata_stream = StringIO.StringIO(_bad_date_input + _good_genome_input + '\n')
        expects.expect(lambda: conv.parse_metadata(metadata_stream)).to(expects.raise_error(ValueError))
        
    with it('raises a ValueError when metadata for genome is not formatted correctly'):
        metadata_stream = StringIO.StringIO(_good_date_input + _bad_genome_input + '\n')  
        expects.expect(lambda: conv.parse_metadata(metadata_stream)).to(expects.raise_error(ValueError, 'Bad input for HRG version'))

    with context('Parse data from input stream'):
        with it('raises a ValueError when a data entry does not have enough columns'):
            expects.expect(lambda: conv.format_data(_bad_data_entry)).to(expects.raise_error(ValueError))

        with it('returns a correctly formatted line when given proper input'):
            assert conv.format_data(_good_data_entry) == _proper_conv_good_data

        with it('returns a properly formatted metadata section with good input'):
            date_obj = datetime.datetime(2018, 4, 20, 16, 20, 22)
            result = conv.format_metadata(date_obj, 99)
            assert _expected == result

        with it('converts Ancestry chromosome numbers into 23andMe character codes'):
            test = ['-1', '20', '21', '22', '23', '24', '25', '26', '27']
            result = []
            expected_chromosomes = [0, '20', '21', '22', 'X', 'Y', 'Y', 'MT', 0]
            for i in test:
                try:
                    result.append(conv.convert_chromosome(i, 'rs140000'))
                except(ValueError):
                    result.append(0)    

            for r in range(9):
                assert result[r] == expected_chromosomes[r]

        with it('properly formats data when given good input'):
            good_input = 'rs4475691\t5\t846808\tT\tC'
            expected_output_good_input = 'rs4475691\t5\t846808\tTC\n'
            result = conv.format_data(good_input)
            assert result == expected_output_good_input
        with it('copies commented lines unchanged'):
            skip_input = '#rsid4475691\t5\t846808\tT\tC'
            assert conv.format_data(skip_input) == skip_input
        with it('removes lines that do not contain a rsid at the beginning'):
            bad_input = 'This\tis\tnot\ta\tproper line'
            assert conv.format_data(bad_input) == None
        with it('raises a ValueError when an entry does not have sufficient data'):
            bad_data_entry = 'rs4475691\t5\t846808\tT'
            expects.expect(lambda: conv.format_data(bad_data_entry)).to(expects.raise_error(ValueError, 'Error parsing data entry: rs4475691'))
