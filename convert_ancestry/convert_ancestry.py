'''
convert_ancestry: Python module for converting ancestry.com raw data to 23andMe format

Provided an Ancestry.com raw data file as input, this module will convert the given raw 
data into a raw data file using the 23andMe format.
'''

import sys
from time import time
from datetime import datetime
import traceback

_chromosome_conversions = {'23':'X', '24':'Y', '25':'Y', '26':'MT'}


def output_file_generator(output_filepath):
    '''Create an output stream to the new file.'''
    buffer = ''
    with open(output_filepath, 'w') as output:
        while(buffer != 'close'):
            buffer = yield
            if(buffer == 'close'):
                return
            output.write(buffer)              


def input_file_generator(input_filepath):
    '''Create a generator to stream the input Ancestry file.'''
    with open(input_filepath) as input:
        for line in input:
            yield line 

def is_date_line(line):
    '''Return True if line contains the date of creation.'''
    return line.startswith('#This file was generated by AncestryDNA at:')


def parse_ancestry_time_header(line):
    '''Return a datetime object for the date the original Ancestry file was written.'''
    timestamp_str = line.rstrip().split(': ')[1]
    datetime_object = datetime.strptime(timestamp_str[:19], '%m/%d/%Y %H:%M:%S')
    return datetime_object

def is_genome_line(line):
    '''Return True if line contains Human Refrence build number.'''
    return line.startswith('#of the SNP using human reference build')


def parse_ancestry_genome_version(line):
    '''Return the human refrence genome used by Ancestry for this file (usually 37).'''
    genome_version = line.rstrip().split('build ')[1].split(' ')[0]
    return genome_version

#Writes the signigicant metadata to the new temp file
def format_metadata(datetime_obj, genome_version):
    '''Given the date of creation and refrence genome version, format a 23andMe style header.'''
    metadata = ''
    metadata += '# This data file generated by 23andMe on: {}\n'.format(datetime_obj.strftime('%c'))
    metadata += '# More information on reference human assembly build {}\n'.format(genome_version)
    #create the column titles
    categories = '#\trsid\tchromosome\tposition\tgenotype\n'
    metadata += categories
    return metadata


def format_data(line):
    '''Returns SNP data in 23andMe format, input must be in Ancestry data file format.'''
    if line.startswith('#'):
        return line

    if line.startswith('rs'):
        fields = line.strip().split('\t')
        fields[3] = fields[3] + fields[4]
        #Convert ancestry numbered chromosomes to 23andMe nomenclature
        fields[1] = convert_chromosome(fields[1], fields[0])  
        #Join the first 4 fields with a newline char then write to the new file
        return('\t'.join(fields[:4]) + '\n')
    else:
        return
    

def convert_data_rows(input_stream, output_stream):
    '''Receive data from input_stream, change format to 23andMe then send to output_stream.'''
    for line in input_stream:
        output_stream.send(format_data(line))
    try:
        output_stream.send('close') 
    except(StopIteration):
        return       
            

def convert_chromosome(number, rsid):
    '''Convert from Ancestry's chromosome number format to 23andMe's format using _chromosome_conversions.'''
    if int(number) not in range(1, 27):
        raise ValueError('Chromosome number: {} for {} is outside of acceptable range 1-26'.format(number, rsid))               
    if int(number) > 22:
        number = _chromosome_conversions[number]
    return number  

 
def is_header_line(line):
    '''Check if given line is part of the input file's header.'''
    return line.startswith('#')


def parse_metadata(input_stream):
    '''Collect the relevant metadata from the input stream.'''
    line = next(input_stream)
    genome_version, datetime_obj = None, None
    while is_header_line(line):
        if is_genome_line(line):
            genome_version = parse_ancestry_genome_version(line)
        if is_date_line(line):    
            datetime_obj = parse_ancestry_time_header(line)
        line = next(input_stream)

    if not genome_version:
        raise ValueError('Human Reference Genome number not found')

    if not datetime_obj:
        raise ValueError('Creation date not found')       

    return genome_version, datetime_obj    


def convert_ancestry(input_stream, output_stream):
    '''
    Main function for converting Ancestry.com style raw data files to 
    23andMe format. Read Ancestry.com data from input_stream.
    Write to a temp file using output_stream.
    '''
    
    genome_version, datetime_obj = parse_metadata(input_stream) 
    #prime the generator
    output_stream.send(None)
    output_stream.send(format_metadata(datetime_obj, genome_version))

    convert_data_rows(input_stream, output_stream)

# Call the process with the command line instruction: python3 convert_ancestry.py path_to_ancestry_file
if __name__ == "__main__":
    ancestry_path = sys.argv[1]
    try:
        #Create generator for input
        input_stream = input_file_generator(ancestry_path)
        #Create output stream
        output_stream = output_file_generator('test/out-23andme.txt')

        convert_ancestry(input_stream, output_stream)

    except Exception as e:
        print("Exception type:", sys.exc_info()[0])
        print("Exception Args:", sys.exc_info()[1])
        print(traceback.format_exc())
        sys.exit(1)
