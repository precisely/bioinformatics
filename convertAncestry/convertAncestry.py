'''
convertAncestry: Python module for converting ancestry.com raw data to 23andMe format

Provided a ancestry.com data file as input, this module will convert the data into a
23andMe formatted data file.
'''

import sys
from time import time
from datetime import datetime
import traceback

chromosome_conversions = {'23':'X', '24':'Y', '25':'Y', '26':'MT'}

#Creates an output stream to the newfile
def output_file_generator(output_filepath):
    buffer = ''
    with open(output_filepath, 'w+') as output:
        while(buffer != 'close'):
            buffer = yield
            output.write(buffer)

#Create a generator to stream the input Ancestry file
def input_file_generator(input_filepath):
    with open(input_filepath) as input:
        for line in input:
            yield line 

def isDateLine(line):
    return line.startswith('#This file was generated by AncestryDNA at:')

#Returns a datetime object for the date the original Ancestry file was written
def parse_ancestry_time_header(line):
    timestamp_str = line.rstrip().split(': ')[1]
    datetime_object = datetime.strptime(timestamp_str[:19], '%m/%d/%Y %H:%M:%S')
    return datetime_object

def isGenomeLine(line):
    return line.startswith('#of the SNP using human reference build')

#Returns the human refrence genome used by Ancestry for this file (usually 37)
def parse_ancestry_genome_version(line):
    genome_version = line.rstrip().split('build ')[1].split(' ')[0]
    return genome_version

#Writes the signigicant metadata to the new temp file
def format_metadata(datetime_obj, genome_version):
    metadata = ''
    metadata += '# This data file generated by 23andMe on: {}\n'.format(datetime_obj.strftime('%c'))
    metadata += '# More information on reference human assembly build {}\n'.format(genome_version)
    #create the column titles
    categories = '#\trsid\tchromosome\tposition\tgenotype\n'
    metadata += categories
    return metadata

#Returns SNP data in 23andMe format, input must be in Ancestry data file format
def format_SNPs(line):
    if not line.startswith('#') and not line.startswith('rsid'):
        fields = line.strip().split('\t')
        fields[3] = fields[3] + fields[4]
        #Convert ancestry numbered chromosomes to 23andMe nomenclature
        try:
            fields[1] = convert_chromosome(fields[1])
        except(ValueError):
            print('Chromosome number out of range check entry for: ' + str(fields[0]))
            fields[1] = 0    
        #Join the first 4 fields with a newline char then write to the new file
        return('\t'.join(fields[:4]) + '\n')

#Sends data from input stream to output stream after using format_SNPs()
def stream_data(input_stream, output_stream):
    for line in input_stream:
        output_stream.send(format_SNPs(line))
            
#Convert from Ancestry's chromosome number format to 23andMe's format
def convert_chromosome(number):
    if int(number) not in range(1, 27):
        raise ValueError('Chromosome number out of range: 1-26')               
    if int(number) > 22:
        number = chromosome_conversions[number]
    return number    

#Collects the metadata from the input stream
def parse_metadata(input_stream):
    line = next(input_stream)
    while line.startswith('#'):
        if(isGenomeLine(line)):
            genome_version = parse_ancestry_genome_version(line)
        if(isDateLine(line)):    
            datetime_obj = parse_ancestry_time_header(line)
        line = next(input_stream)

    if not genome_version:
        genome_version = "Error parsing Human Refrence Genome number"

    if not datetime_obj:
        datetime_obj = "Error parsing date of creation"        

    return genome_version, datetime_obj    

#main function
def convert_ancestry(input_stream, output_stream):
    
    genome_version, datetime_obj = parse_metadata(input_stream) 

    next(output_stream)
    output_stream.send(format_metadata(datetime_obj, genome_version))

    stream_data(input_stream, output_stream)

# Call the process with the command line instruction: python3 convertAncestry.py path_to_ancestry_file
if __name__ == "__main__":
    ancestry_path = sys.argv[1]
    try:
        #Create generator for input
        input_stream = input_file_generator(ancestry_path)
        #Create output stream
        output_stream = output_file_generator('testing/out-23andme.txt')

        convert_ancestry(input_stream, output_stream)

    except Exception as e:
        print("Exception type:", sys.exc_info()[0])
        print("Exception Args:", sys.exc_info()[1])
        print(traceback.format_exc())
        sys.exit(1)
