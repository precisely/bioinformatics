from mamba import description, context, it
import convertAncestry as conv
import datetime
import types
import unittest
import os.path
import random


with description('Testing Ancestry.com -> 23andme converter:') as testConverter:
    with it('Creating input/output Generator and checking output file exists'):
        random_outfile_name = 'testing/' + str(random.randint(1, 10000)) + 'out_23andMe.txt'
        in_generator = conv.input_file_generator('testing/AncestryDNA.txt')
        out_generator = conv.output_file_generator(random_outfile_name)
        out_generator.send(None)
        out_generator.send('TEST')
        assert type(in_generator) == types.GeneratorType
        assert type(out_generator) == types.GeneratorType
        assert os.path.isfile(random_outfile_name)
    with it('Parsing AncestryDNA input header for metadata'):
        generator = conv.input_file_generator('testing/AncestryDNA.txt')
        line = next(generator)
        while line.startswith('#'):
            if(conv.isGenomeLine(line)):
                genome_version = conv.parse_ancestry_genome_version(line)
            if(conv.isDateLine(line)):    
                datetime_obj = conv.parse_ancestry_time_header(line)
            line = next(generator)
        with context('Genome Version should be 37.1'):    
            assert genome_version == '37.1'
        with context('Datetime object should be the correct type'):
            assert type(datetime_obj) == datetime.datetime
    with it('Formatting metadata'):
        expected = '# This data file generated by 23andMe on: Fri Apr 20 16:20:22 2018\n# More information on reference human assembly build 99\n#\trsid\tchromosome\tposition\tgenotype\n'       
        date_obj = datetime.datetime(2018, 4, 20, 16, 20, 22)
        result = conv.format_metadata(date_obj, 99)
        assert expected == result
    with it('Chromosome conversions test'):
        test = ['-1', '20', '21', '22', '23', '24', '25', '26', '27']
        result = []
        expected = [0, '20', '21', '22', 'X', 'Y', 'Y', 'MT', 0]
        for i in test:
            try:
                result.append(conv.convert_chromosome(i))
            except(ValueError):
                result.append(0)    

        for r in range(9):
            assert result[r] == expected[r]    

    with it(''):
        pass        



        